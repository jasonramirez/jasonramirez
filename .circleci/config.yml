version: 2.1

orbs:
  ruby: circleci/ruby@2.1.0
  node: circleci/node@5.2.0

executors:
  rails-executor:
    docker:
      - image: cimg/ruby:3.2.9-node
        environment:
          RAILS_ENV: test
          DATABASE_URL: postgresql://circleci@127.0.0.1:5432/jasonramirez_test
          DATABASE_SUPER_URL: postgresql://postgres@127.0.0.1:5432/postgres
          CC_TEST_REPORTER_ID: # Add your CodeClimate reporter ID if you have one
          NODE_ENV: test
      - image: pgvector/pgvector:pg16
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: jasonramirez_test
          POSTGRES_HOST_AUTH_METHOD: trust
    working_directory: ~/repo

jobs:
  checkout_and_install:
    executor: rails-executor
    steps:
      - checkout

      # Ruby dependencies
      - ruby/install-deps:
          bundler-version: "2.7.1"

      # Install specific Node.js and Yarn versions to match package.json
      - node/install:
          node-version: "24.3.0"

      - run:
          name: Install specific Yarn version
          command: |
            sudo corepack enable
            corepack prepare yarn@1.22.22 --activate

      # Node dependencies
      - node/install-packages:
          pkg-manager: yarn
          override-ci-command: yarn install --frozen-lockfile

      # Cache node_modules with Node.js version
      - save_cache:
          key: v1-node24-modules-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

      # Persist workspace for other jobs
      - persist_to_workspace:
          root: ~/repo
          paths:
            - .

  run_tests:
    executor: rails-executor
    parallelism: 1
    steps:
      - attach_workspace:
          at: ~/repo

      - ruby/install-deps:
          bundler-version: "2.7.1"

      # Wait for PostgreSQL
      - run:
          name: Wait for PostgreSQL
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # Setup database for tests
      - run:
          name: Setup database for tests
          command: |
            sudo apt-get update
            sudo apt-get install -y postgresql-client
            psql "postgresql://postgres@127.0.0.1:5432/postgres" -c "CREATE DATABASE jasonramirez_test;" || true
            psql "postgresql://postgres@127.0.0.1:5432/jasonramirez_test" -c "CREATE EXTENSION IF NOT EXISTS vector WITH SCHEMA public;"
            psql "postgresql://postgres@127.0.0.1:5432/postgres" -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'circleci') THEN CREATE ROLE circleci LOGIN; END IF; END \$\$;"
            psql "postgresql://postgres@127.0.0.1:5432/postgres" -c "GRANT ALL PRIVILEGES ON DATABASE jasonramirez_test TO circleci;"
            psql "postgresql://postgres@127.0.0.1:5432/postgres" -c "ALTER DATABASE jasonramirez_test OWNER TO circleci;"
            # Run migrations
            export RAILS_ENV=test
            bundle exec rails db:migrate

      # Setup browser for feature tests
      - run:
          name: Setup Chrome for feature tests
          command: |
            sudo apt-get update
            sudo apt-get install -y wget gnupg
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
            sudo apt-get update
            sudo apt-get install -y google-chrome-stable
            google-chrome --version

      # Set test environment variables
      - run:
          name: Set test environment variables
          command: |
            echo 'export OPENAI_API_KEY="test-key-for-ci"' >> $BASH_ENV
            echo 'export MAILCHIMP_API_KEY="test-mailchimp-key"' >> $BASH_ENV
            echo 'export LOCKUP_CODEWORD="test-password"' >> $BASH_ENV
            echo 'export RAILS_ENV=test' >> $BASH_ENV

      # Precompile assets for feature tests
      - run:
          name: Precompile assets
          command: RAILS_ENV=test bundle exec rails assets:precompile

      # Run tests
      - run:
          name: Run RSpec tests
          command: |
            mkdir -p test_results
            bundle exec rspec \
              --profile 10 \
              --format RspecJunitFormatter \
              --out test_results/rspec.xml \
              --format progress

      # Store test results
      - store_test_results:
          path: test_results

      # Store test artifacts
      - store_artifacts:
          path: test_results
          destination: test-results

      # Store coverage reports (if you use SimpleCov)
      - store_artifacts:
          path: coverage
          destination: coverage

  lint_and_security:
    executor: rails-executor
    steps:
      - attach_workspace:
          at: ~/repo

      - ruby/install-deps:
          bundler-version: "2.7.1"

      # Run bundler-audit for security vulnerabilities
      - run:
          name: Security audit
          command: |
            bundle exec bundle-audit check --update || true

      # Run brakeman for security scanning (if you have it)
      - run:
          name: Security scan with Brakeman
          command: |
            if bundle list | grep -q brakeman; then
              bundle exec brakeman --no-pager
            else
              echo "Brakeman not installed, skipping security scan"
            fi

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - checkout_and_install:
          filters:
            branches:
              only:
                - main
                - develop
                - /feature\/.*/

      - run_tests:
          requires:
            - checkout_and_install
          filters:
            branches:
              only:
                - main
                - develop
                - /feature\/.*/

      - lint_and_security:
          requires:
            - checkout_and_install
          filters:
            branches:
              only:
                - main
                - develop
                - /feature\/.*/
