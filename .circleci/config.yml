version: 2.1

orbs:
  ruby: circleci/ruby@2.1.0
  node: circleci/node@5.2.0

executors:
  rails-executor:
    docker:
      - image: cimg/ruby:3.2.9-node
        environment:
          RAILS_ENV: test
          DATABASE_URL: postgresql://circleci:@localhost:5432/jasonramirez_test
          CC_TEST_REPORTER_ID: # Add your CodeClimate reporter ID if you have one
          NODE_ENV: test
      - image: cimg/postgres:17.6
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: jasonramirez_test
          POSTGRES_HOST_AUTH_METHOD: trust
    working_directory: ~/repo

jobs:
  checkout_and_install:
    executor: rails-executor
    steps:
      - checkout

      # Ruby dependencies
      - ruby/install-deps:
          bundler-version: "2.7.1"

      # Install specific Node.js and Yarn versions to match package.json
      - node/install:
          node-version: "24.3.0"

      - run:
          name: Install specific Yarn version
          command: |
            sudo corepack enable
            corepack prepare yarn@1.22.22 --activate

      # Node dependencies
      - node/install-packages:
          pkg-manager: yarn
          override-ci-command: yarn install --frozen-lockfile

      # Cache node_modules with Node.js version
      - save_cache:
          key: v1-node24-modules-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

      # Persist workspace for other jobs
      - persist_to_workspace:
          root: ~/repo
          paths:
            - .

  setup_database:
    executor: rails-executor
    steps:
      - attach_workspace:
          at: ~/repo

      - ruby/install-deps:
          bundler-version: "2.7.1"

      # Wait for PostgreSQL
      - run:
          name: Wait for PostgreSQL
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # Restore pgvector cache if available
      - restore_cache:
          keys:
            - v1-pgvector17-compiled-{{ arch }}

      # Install pgvector extension (best effort)
      - run:
          name: Install pgvector extension
          command: |
            # Check if pgvector is already installed
            if sudo find /usr -name "vector.so" 2>/dev/null | grep -q vector.so && \
               sudo find /usr -name "vector.control" 2>/dev/null | grep -q vector.control; then
              echo "‚úÖ pgvector already installed from cache"
              exit 0
            fi

            echo "üîß Installing pgvector extension..."

            # Show system info
            echo "System information:"
            echo "  - OS: $(lsb_release -a 2>/dev/null || echo 'Unknown')"
            echo "  - Architecture: $(uname -m)"
            echo "  - Available PostgreSQL versions:"
            ls -la /usr/lib/postgresql/ 2>/dev/null || echo "    No PostgreSQL installations found"

            # Install dependencies
            sudo apt-get update
            sudo apt-get install -y wget ca-certificates build-essential

            # Add PostgreSQL APT repository
            wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - || true
            echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list

            sudo apt-get update
            sudo apt-get install -y postgresql-client postgresql-contrib postgresql-server-dev-17

            # Verify PostgreSQL installation
            echo "PostgreSQL installation verification:"
            echo "  - postgresql-client version: $(psql --version 2>/dev/null || echo 'Not found')"
            echo "  - Available pg_config versions:"
            find /usr -name "pg_config" 2>/dev/null | head -5 || echo "    No pg_config found"
            echo "  - PostgreSQL server status:"
            sudo systemctl status postgresql 2>/dev/null || echo "    Service not found or not running"

            # Compile pgvector - REQUIRED for application functionality
            cd /tmp
            git clone --branch v0.5.1 https://github.com/pgvector/pgvector.git

            cd pgvector
            export PG_CONFIG=/usr/lib/postgresql/17/bin/pg_config

            # Show pgvector source info
            echo "pgvector source information:"
            echo "  - Git commit: $(git rev-parse HEAD 2>/dev/null || echo 'Unknown')"
            echo "  - Branch: $(git branch --show-current 2>/dev/null || echo 'Unknown')"
            echo "  - Source files:"
            ls -la *.c *.h 2>/dev/null | head -5 || echo "    No source files found"

            if [ -f "$PG_CONFIG" ]; then
              echo "Using pg_config: $PG_CONFIG"
              $PG_CONFIG --version
              
              # Show what we're about to install
              echo "PostgreSQL installation directories:"
              $PG_CONFIG --pkglibdir
              $PG_CONFIG --sharedir
              
              make clean
              make PG_CONFIG=$PG_CONFIG
              sudo make install PG_CONFIG=$PG_CONFIG
              
              # Verify installation
              echo "Verifying pgvector installation:"
              if [ -f "$($PG_CONFIG --sharedir)/extension/vector.control" ]; then
                echo "‚úÖ vector.control found at $($PG_CONFIG --sharedir)/extension/vector.control"
              else
                echo "‚ùå vector.control NOT found at $($PG_CONFIG --sharedir)/extension/"
                echo "Contents of extension directory:"
                ls -la "$($PG_CONFIG --sharedir)/extension/" || echo "Directory does not exist"
                exit 1
              fi
              
              if [ -f "$($PG_CONFIG --pkglibdir)/vector.so" ]; then
                echo "‚úÖ vector.so found at $($PG_CONFIG --pkglibdir)/vector.so"
              else
                echo "‚ùå vector.so NOT found at $($PG_CONFIG --pkglibdir)/"
                echo "Contents of lib directory:"
                ls -la "$($PG_CONFIG --pkglibdir)/" || echo "Directory does not exist"
                exit 1
              fi
              
              echo "‚úÖ pgvector compiled and installed successfully"
            else
              echo "‚ùå pg_config not found at $PG_CONFIG - CRITICAL ERROR"
              exit 1
            fi

      # Cache the compiled pgvector
      - save_cache:
          key: v1-pgvector17-compiled-{{ arch }}
          paths:
            - /usr/lib/postgresql/17/lib/vector.so
            - /usr/share/postgresql/17/extension/vector*
            - /usr/lib/postgresql/17/share/extension/vector*

      # Setup test database using our script
      - run:
          name: Setup test database
          command: ./bin/setup_test_db

      - persist_to_workspace:
          root: ~/repo
          paths:
            - .

  run_tests:
    executor: rails-executor
    parallelism: 1
    steps:
      - attach_workspace:
          at: ~/repo

      - ruby/install-deps:
          bundler-version: "2.7.1"

      # Wait for PostgreSQL
      - run:
          name: Wait for PostgreSQL
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # Precompile assets for feature tests
      - run:
          name: Precompile assets
          command: RAILS_ENV=test bundle exec rails assets:precompile

      # Run tests
      - run:
          name: Run RSpec tests
          command: |
            mkdir -p test_results
            bundle exec rspec \
              --profile 10 \
              --format RspecJunitFormatter \
              --out test_results/rspec.xml \
              --format progress

      # Store test results
      - store_test_results:
          path: test_results

      # Store test artifacts
      - store_artifacts:
          path: test_results
          destination: test-results

      # Store coverage reports (if you use SimpleCov)
      - store_artifacts:
          path: coverage
          destination: coverage

  lint_and_security:
    executor: rails-executor
    steps:
      - attach_workspace:
          at: ~/repo

      - ruby/install-deps:
          bundler-version: "2.7.1"

      # Run bundler-audit for security vulnerabilities
      - run:
          name: Security audit
          command: |
            bundle exec bundle-audit check --update || true

      # Run brakeman for security scanning (if you have it)
      - run:
          name: Security scan with Brakeman
          command: |
            if bundle list | grep -q brakeman; then
              bundle exec brakeman --no-pager
            else
              echo "Brakeman not installed, skipping security scan"
            fi

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - checkout_and_install:
          filters:
            branches:
              only:
                - main
                - develop
                - /feature\/.*/

      - setup_database:
          requires:
            - checkout_and_install
          filters:
            branches:
              only:
                - main
                - develop
                - /feature\/.*/

      - run_tests:
          requires:
            - setup_database
          filters:
            branches:
              only:
                - main
                - develop
                - /feature\/.*/

      - lint_and_security:
          requires:
            - checkout_and_install
          filters:
            branches:
              only:
                - main
                - develop
                - /feature\/.*/
