#!/usr/bin/env bash
set -euo pipefail

# Helper to run psql with a URL or discrete params
run_psql() {
  local url="${1:-}"
  shift || true
  if [[ -n "${url}" ]]; then
    psql "${url}" "$@"
  else
    psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" "$@"
  fi
}

run_psql_super() {
  # Use explicit SUPERUSER URL if provided, else fall back to POSTGRES defaults
  local url="${DB_SUPER_URL:-}"
  if [[ -n "${url}" ]]; then
    psql "${url}" "$@"
  else
    PGPASSWORD="${POSTGRES_PASSWORD:-postgres}" psql -h "${POSTGRES_HOST:-$DB_HOST}" -U "${POSTGRES_USER:-postgres}" -d "${POSTGRES_DB:-postgres}" "$@"
  fi
}

echo "Setting up test database..."
echo "Environment info:"
echo "  - RAILS_ENV: ${RAILS_ENV:-not set}"
echo "  - DATABASE_URL: ${DATABASE_URL:-not set}"
echo "  - PWD: $(pwd)"
echo "  - PostgreSQL version: $(psql --version)"
# Database configuration
DB_NAME=${DATABASE_NAME:-jasonramirez_test}
DB_USER=${DATABASE_USER:-circleci}
DB_HOST=${DATABASE_HOST:-localhost}
DB_URL=${DATABASE_URL:-}
# Optional superuser connection (recommended in CI): e.g., postgresql://postgres:postgres@127.0.0.1:5432/postgres
DB_SUPER_URL=${DATABASE_SUPER_URL:-}

echo "Connection:"
echo "  - DB_NAME: ${DB_NAME}"
echo "  - DB_USER: ${DB_USER}"
echo "  - DB_HOST: ${DB_HOST}"
echo "  - DATABASE_URL: ${DB_URL:-(not set)}"
echo "  - DATABASE_SUPER_URL: ${DB_SUPER_URL:-(not set)}"

echo "Using existing database: $DB_NAME"
echo "ℹ️ Database already created by CircleCI with pgvector extension"
echo "✅ Database ready for migrations"

echo "Checking pgvector extension status..."
# The extension should already be enabled by CircleCI config, just verify
if run_psql -c "SELECT 1 FROM pg_extension WHERE extname = 'vector';" >/dev/null 2>&1; then
  echo "✅ pgvector extension is already enabled"
else
  echo "⚠️ pgvector extension not found, but CircleCI should have enabled it"
fi

echo "Running Rails migrations..."
export RAILS_ENV=test

# Remove schema file to prevent Rails from trying to load it during migrations
# The schema will be regenerated after migrations complete
if [[ -f "db/schema.rb" ]]; then
  echo "ℹ️ Removing schema file to prevent extension conflicts"
  rm db/schema.rb
fi

# Ensure Rails uses the same DB_URL if provided
if [[ -n "${DB_URL}" ]]; then
  DATABASE_URL="${DB_URL}" bundle exec rails db:migrate
else
  bundle exec rails db:migrate
fi
echo "✅ Migrations run successfully"

# Note: All tables and columns should be created by migrations above

# Set Rails environment - CRITICAL: must succeed
echo "Setting Rails test environment..."
export RAILS_ENV=test
bundle exec rails db:environment:set
echo "✅ Rails environment set successfully"

# Final verification - CRITICAL: all tables must exist
echo "Final database verification..."
echo "Tables in database:"
run_psql "${DB_URL}" -c "\dt"

echo "Schema migrations status:"
run_psql "${DB_URL}" -c "SELECT COUNT(*) as migration_count FROM schema_migrations;"

echo "Verifying critical tables exist:"
for table in posts admins knowledge_items chat_messages knowledge_chunks; do
    echo "- Checking $table:"
    if run_psql "${DB_URL}" -c "\d $table" >/dev/null 2>&1; then
        echo "  ✅ $table exists"
    else
        echo "  ❌ $table MISSING - CRITICAL ERROR"
        exit 1
    fi
done

echo "✅ Test database setup complete!"
