@use "variables/tokens" as *;
@use "variables/variables" as *;
@use "sass:color";
/*
 * Button Component with Loading State
 * 
 * Usage:
 * 1. Add the 'button' class to any button element
 * 2. Add 'loading' class to show loading state: <button class="button loading">Loading...</button>
 * 3. Add 'disabled' class or disabled attribute to disable: <button class="button" disabled>Disabled</button>
 * 
 * JavaScript Integration:
 * - Use LoadingButton.init(buttonElement) to add loading functionality
 * - Use LoadingButton.initFormSubmit(formElement) for form submit buttons
 * - Auto-initialize with data-loading="true" on forms: <form data-loading="true">
 * 
 * Loading State Features:
 * - Spinning animation with CSS keyframes
 * - Text becomes transparent, spinner appears
 * - Button becomes disabled and unclickable
 * - Works with both <button> and <input type="submit"> elements
 */

.button {
  appearance: none;
  background-color: $button-background-color;
  border: none;
  box-sizing: border-box;
  border-radius: $button-border-radius;
  color: $button-color;
  cursor: pointer;
  display: flex;
  align-items: center;
  height: $input-height;
  min-width: $input-height;
  justify-content: center;
  font-family: $button-font-family;
  font-size: $small-font-size;
  font-weight: $button-font-weight;
  line-height: $button-line-height;
  letter-spacing: 0.025rem;
  word-spacing: 0.1rem;
  outline: $action-color solid 0px;
  padding: $xx-small-spacing $small-spacing;
  text-transform: uppercase;
  transition: all $base-duration;

  &:hover {
    background-color: color.adjust($button-background-color, $lightness: -10%);
    color: $button-color;
    cursor: pointer;
    text-decoration: none;
  }

  & + & {
    margin-left: $small-spacing;
  }

  // Loading state
  &:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  @media (max-width: $medium-screen) {
    font-size: $base-font-size;
    word-spacing: 0.15rem;
  }

  svg {
    height: $base-font-size;
    width: $base-font-size;
  }
}

.button--loading {
  color: transparent;
  position: relative;

  &::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    width: 16px;
    height: 16px;
    margin: -8px 0 0 -8px;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.button--square {
  align-items: center;
  display: flex;
  font-size: 2rem;
  height: 3rem;
  justify-content: center;
  padding: 0;
  width: 3rem;

  &:active,
  &:focus,
  &:hover {
    svg {
      path {
        transition: all $base-duration $base-timing;
        fill: $button-color;
      }
    }
  }

  svg {
    height: 1.5rem;
    width: 1.5rem;
  }
}

.button--secondary {
  color: $base-font-color;
  border: $base-border-style $base-border-width $base-border-color;
  text-decoration: none;
  background-color: transparent;
}

.button--with-icon {
  overflow: hidden;
  position: relative;

  &:hover {
    padding-right: 4.5rem;

    svg g {
      stroke: $action-color;
    }

    .button__icon {
      opacity: 100%;
    }
  }
}

.button--link {
  background-color: transparent;
  border: none;
  box-shadow: none;
  color: $base-font-color;
  padding: 0;

  &:hover {
    background-color: transparent;
    box-shadow: none;
    outline: none;
  }
}

.button__icon {
  height: 1rem;
  left: 50%;
  opacity: 0%;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  transition-duration: $base-duration;
  transition-property: transform padding opacity;
  width: 1rem;
  z-index: 1;
}
